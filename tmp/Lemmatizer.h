/****************************************************************************
**
** Namespace LEMMATIZERLib generated by dumpcpp from type library
** Lemmatizer.tlb
**
****************************************************************************/

#ifndef QAX_DUMPCPP_LEMMATIZER_H
#define QAX_DUMPCPP_LEMMATIZER_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef LEMMATIZERLIB_EXPORT
#define LEMMATIZERLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace LEMMATIZERLib {

    enum __MIDL___MIDL_itf_Lemmatizer_0000_0000_0001 {
        idlFinance              = 1,
        idlComputer             = 2,
        idlLiterature           = 4
    };

// forward declarations
    enum __MIDL___MIDL_itf_Lemmatizer_0000_0000_0001;
    class IParadigm;
    class IParadigmCollection;
    enum __MIDL___MIDL_itf_Lemmatizer_0000_0000_0001;
    class ILemmatizer;

class LEMMATIZERLIB_EXPORT IParadigm : public QAxObject
{
public:
    IParadigm(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BaseLength

    property BaseLength

    */
    inline uint BaseLength() const; //Returns the value of BaseLength

    /*
    Property Count

    property Count

    */
    inline uint Count() const; //Returns the value of Count

    /*
    Property Founded

    property Founded

    */
    inline int Founded() const; //Returns the value of Founded

    /*
    Property HomonymWeight

    property HomonymWeight

    */
    inline int HomonymWeight() const; //Returns the value of HomonymWeight

    /*
    Property LemmaPrefixLength

    property LemmaPrefixLength

    */
    inline int LemmaPrefixLength() const; //Returns the value of LemmaPrefixLength

    /*
    Property Norm

    property Norm

    */
    inline QString Norm() const; //Returns the value of Norm

    /*
    Property ParadigmID

    property ParadigmID

    */
    inline uint ParadigmID() const; //Returns the value of ParadigmID

    /*
    Property SrcAncode

    property SrcAncode

    */
    inline QString SrcAncode() const; //Returns the value of SrcAncode

    /*
    Property SrcNorm

    property SrcNorm

    */
    inline QString SrcNorm() const; //Returns the value of SrcNorm

    /*
    Property TypeAncode

    property TypeAncode

    */
    inline QString TypeAncode() const; //Returns the value of TypeAncode

    /*
    Property WordWeight

    property WordWeight

    */
    inline int WordWeight() const; //Returns the value of WordWeight

    /*
    Method Accent

    property Accent

    */
    inline uint Accent(uint pos);

    /*
    Method Ancode

    property Ancode

    */
    inline QString Ancode(uint pos);

    /*
    Method Form

    property Form

    */
    inline QString Form(uint pos);

    /*
    Method HomonymWeightWithForm

    property HomonymWeightWithForm

    */
    inline int HomonymWeightWithForm(uint pos);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LEMMATIZERLIB_EXPORT IParadigmCollection : public QAxObject
{
public:
    IParadigmCollection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    property Count

    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    property Item

    */
    inline LEMMATIZERLib::IParadigm* Item(int pos);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LEMMATIZERLIB_EXPORT ILemmatizer : public QAxObject
{
public:
    ILemmatizer(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property MaximalPrediction

    property MaximalPrediction

    */
    inline int MaximalPrediction() const; //Returns the value of MaximalPrediction
    inline void SetMaximalPrediction(int value); //Sets the value of the MaximalPrediction property

    /*
    Property UseStatistic

    property UseStatistic

    */
    inline int UseStatistic() const; //Returns the value of UseStatistic
    inline void SetUseStatistic(int value); //Sets the value of the UseStatistic property

    /*
    Method CheckABC

    method CheckABC

    */
    inline int CheckABC(const QString& Word);

    /*
    Method CreateParadigmCollectionFromForm

    method CreateParadigmCollectionFromForm

    */
    inline LEMMATIZERLib::IParadigmCollection* CreateParadigmCollectionFromForm(const QString& Form, int capital, int UsePrediction);

    /*
    Method CreateParadigmCollectionFromNorm

    method CreateParadigmCollectionFromNorm

    */
    inline LEMMATIZERLib::IParadigmCollection* CreateParadigmCollectionFromNorm(const QString& Norm, int capital, int UsePrediction);

    /*
    Method CreateParadigmFromID

    method CreateParadigmFromID

    */
    inline LEMMATIZERLib::IParadigm* CreateParadigmFromID(int id);

    /*
    Method LoadDictionariesRegistry

    method LoadDictionariesRegistry

    */
    inline void LoadDictionariesRegistry();

    /*
    Method LoadStatisticRegistry

    method LoadStatisticRegistry

    */
    inline void LoadStatisticRegistry(LEMMATIZERLib::__MIDL___MIDL_itf_Lemmatizer_0000_0000_0001 subj);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LEMMATIZERLIB_EXPORT IPLMLineCollection : public QAxObject
{
public:
    IPLMLineCollection(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    property Count

    */
    inline int Count() const; //Returns the value of Count

    /*
    Method AttachLemmatizer

    method AttachLemmatizer

    */
    inline void AttachLemmatizer(LEMMATIZERLib::ILemmatizer* pVal);

    /*
    Method Clear

    method Clear

    */
    inline void Clear();

    /*
    Method CopyItems

    method CopyItems

    */
    inline void CopyItems(IUnknown* piPlmLinesFrom);

    /*
    Method Item

    property Item

    */
    inline QString Item(int pos);

    /*
    Method ProcessHyphenWords

    method ProcessHyphenWords

    */
    inline void ProcessHyphenWords(IUnknown* piGraphan);

    /*
    Method ProcessPlmLines

    method ProcessPlmLines

    */
    inline void ProcessPlmLines(IUnknown* piGraphmatFile);

    /*
    Method Remove

    method Remove

    */
    inline void Remove(int pos);

    /*
    Method SaveToFile

    method SaveToFile

    */
    inline void SaveToFile(const QString& filename);

    /*
    Method SetItem
    */
    inline void SetItem(int pos, const QString& rhs);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class LEMMATIZERLIB_EXPORT Paradigm : public QAxObject
{
public:
    Paradigm(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{6b232504-1816-11d3-9cc6-00105a68baf2}");
    }

    Paradigm(IParadigm *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BaseLength

    property BaseLength

    */
    inline uint BaseLength() const; //Returns the value of BaseLength

    /*
    Property Count

    property Count

    */
    inline uint Count() const; //Returns the value of Count

    /*
    Property Founded

    property Founded

    */
    inline int Founded() const; //Returns the value of Founded

    /*
    Property HomonymWeight

    property HomonymWeight

    */
    inline int HomonymWeight() const; //Returns the value of HomonymWeight

    /*
    Property LemmaPrefixLength

    property LemmaPrefixLength

    */
    inline int LemmaPrefixLength() const; //Returns the value of LemmaPrefixLength

    /*
    Property Norm

    property Norm

    */
    inline QString Norm() const; //Returns the value of Norm

    /*
    Property ParadigmID

    property ParadigmID

    */
    inline uint ParadigmID() const; //Returns the value of ParadigmID

    /*
    Property SrcAncode

    property SrcAncode

    */
    inline QString SrcAncode() const; //Returns the value of SrcAncode

    /*
    Property SrcNorm

    property SrcNorm

    */
    inline QString SrcNorm() const; //Returns the value of SrcNorm

    /*
    Property TypeAncode

    property TypeAncode

    */
    inline QString TypeAncode() const; //Returns the value of TypeAncode

    /*
    Property WordWeight

    property WordWeight

    */
    inline int WordWeight() const; //Returns the value of WordWeight

    /*
    Method Accent

    property Accent

    */
    inline uint Accent(uint pos);

    /*
    Method Ancode

    property Ancode

    */
    inline QString Ancode(uint pos);

    /*
    Method Form

    property Form

    */
    inline QString Form(uint pos);

    /*
    Method HomonymWeightWithForm

    property HomonymWeightWithForm

    */
    inline int HomonymWeightWithForm(uint pos);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LEMMATIZERLIB_EXPORT ParadigmCollection : public QAxObject
{
public:
    ParadigmCollection(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{6b232506-1816-11d3-9cc6-00105a68baf2}");
    }

    ParadigmCollection(IParadigmCollection *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    property Count

    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    property Item

    */
    inline LEMMATIZERLib::IParadigm* Item(int pos);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LEMMATIZERLIB_EXPORT LemmatizerRussian : public QAxObject
{
public:
    LemmatizerRussian(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{6b23250f-1816-11d3-9cc6-00105a68baf2}");
    }

    LemmatizerRussian(ILemmatizer *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property MaximalPrediction

    property MaximalPrediction

    */
    inline int MaximalPrediction() const; //Returns the value of MaximalPrediction
    inline void SetMaximalPrediction(int value); //Sets the value of the MaximalPrediction property

    /*
    Property UseStatistic

    property UseStatistic

    */
    inline int UseStatistic() const; //Returns the value of UseStatistic
    inline void SetUseStatistic(int value); //Sets the value of the UseStatistic property

    /*
    Method CheckABC

    method CheckABC

    */
    inline int CheckABC(const QString& Word);

    /*
    Method CreateParadigmCollectionFromForm

    method CreateParadigmCollectionFromForm

    */
    inline LEMMATIZERLib::IParadigmCollection* CreateParadigmCollectionFromForm(const QString& Form, int capital, int UsePrediction);

    /*
    Method CreateParadigmCollectionFromNorm

    method CreateParadigmCollectionFromNorm

    */
    inline LEMMATIZERLib::IParadigmCollection* CreateParadigmCollectionFromNorm(const QString& Norm, int capital, int UsePrediction);

    /*
    Method CreateParadigmFromID

    method CreateParadigmFromID

    */
    inline LEMMATIZERLib::IParadigm* CreateParadigmFromID(int id);

    /*
    Method LoadDictionariesRegistry

    method LoadDictionariesRegistry

    */
    inline void LoadDictionariesRegistry();

    /*
    Method LoadStatisticRegistry

    method LoadStatisticRegistry

    */
    inline void LoadStatisticRegistry(LEMMATIZERLib::__MIDL___MIDL_itf_Lemmatizer_0000_0000_0001 subj);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LEMMATIZERLIB_EXPORT LemmatizerEnglish : public QAxObject
{
public:
    LemmatizerEnglish(const QString &licenseKey = QString(), QObject *parent = 0)
    : QAxObject(parent)
    {
        if (licenseKey.isEmpty())
            setControl("{6b232511-1816-11d3-9cc6-00105a68baf2}");
        else
            setControl("{6b232511-1816-11d3-9cc6-00105a68baf2}:" + licenseKey);
    }

    LemmatizerEnglish(ILemmatizer *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property MaximalPrediction

    property MaximalPrediction

    */
    inline int MaximalPrediction() const; //Returns the value of MaximalPrediction
    inline void SetMaximalPrediction(int value); //Sets the value of the MaximalPrediction property

    /*
    Property UseStatistic

    property UseStatistic

    */
    inline int UseStatistic() const; //Returns the value of UseStatistic
    inline void SetUseStatistic(int value); //Sets the value of the UseStatistic property

    /*
    Method CheckABC

    method CheckABC

    */
    inline int CheckABC(const QString& Word);

    /*
    Method CreateParadigmCollectionFromForm

    method CreateParadigmCollectionFromForm

    */
    inline LEMMATIZERLib::IParadigmCollection* CreateParadigmCollectionFromForm(const QString& Form, int capital, int UsePrediction);

    /*
    Method CreateParadigmCollectionFromNorm

    method CreateParadigmCollectionFromNorm

    */
    inline LEMMATIZERLib::IParadigmCollection* CreateParadigmCollectionFromNorm(const QString& Norm, int capital, int UsePrediction);

    /*
    Method CreateParadigmFromID

    method CreateParadigmFromID

    */
    inline LEMMATIZERLib::IParadigm* CreateParadigmFromID(int id);

    /*
    Method LoadDictionariesRegistry

    method LoadDictionariesRegistry

    */
    inline void LoadDictionariesRegistry();

    /*
    Method LoadStatisticRegistry

    method LoadStatisticRegistry

    */
    inline void LoadStatisticRegistry(LEMMATIZERLib::__MIDL___MIDL_itf_Lemmatizer_0000_0000_0001 subj);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LEMMATIZERLIB_EXPORT LemmatizerGerman : public QAxObject
{
public:
    LemmatizerGerman(const QString &licenseKey = QString(), QObject *parent = 0)
    : QAxObject(parent)
    {
        if (licenseKey.isEmpty())
            setControl("{d26721ac-5ba9-4a1e-bbd0-a74cf86437e7}");
        else
            setControl("{d26721ac-5ba9-4a1e-bbd0-a74cf86437e7}:" + licenseKey);
    }

    LemmatizerGerman(ILemmatizer *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property MaximalPrediction

    property MaximalPrediction

    */
    inline int MaximalPrediction() const; //Returns the value of MaximalPrediction
    inline void SetMaximalPrediction(int value); //Sets the value of the MaximalPrediction property

    /*
    Property UseStatistic

    property UseStatistic

    */
    inline int UseStatistic() const; //Returns the value of UseStatistic
    inline void SetUseStatistic(int value); //Sets the value of the UseStatistic property

    /*
    Method CheckABC

    method CheckABC

    */
    inline int CheckABC(const QString& Word);

    /*
    Method CreateParadigmCollectionFromForm

    method CreateParadigmCollectionFromForm

    */
    inline LEMMATIZERLib::IParadigmCollection* CreateParadigmCollectionFromForm(const QString& Form, int capital, int UsePrediction);

    /*
    Method CreateParadigmCollectionFromNorm

    method CreateParadigmCollectionFromNorm

    */
    inline LEMMATIZERLib::IParadigmCollection* CreateParadigmCollectionFromNorm(const QString& Norm, int capital, int UsePrediction);

    /*
    Method CreateParadigmFromID

    method CreateParadigmFromID

    */
    inline LEMMATIZERLib::IParadigm* CreateParadigmFromID(int id);

    /*
    Method LoadDictionariesRegistry

    method LoadDictionariesRegistry

    */
    inline void LoadDictionariesRegistry();

    /*
    Method LoadStatisticRegistry

    method LoadStatisticRegistry

    */
    inline void LoadStatisticRegistry(LEMMATIZERLib::__MIDL___MIDL_itf_Lemmatizer_0000_0000_0001 subj);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LEMMATIZERLIB_EXPORT PLMLineCollection : public QAxObject
{
public:
    PLMLineCollection(const QString &licenseKey = QString(), QObject *parent = 0)
    : QAxObject(parent)
    {
        if (licenseKey.isEmpty())
            setControl("{34e94e25-6c26-11d3-9d4a-00105a68baf2}");
        else
            setControl("{34e94e25-6c26-11d3-9d4a-00105a68baf2}:" + licenseKey);
    }

    PLMLineCollection(IPLMLineCollection *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    property Count

    */
    inline int Count() const; //Returns the value of Count

    /*
    Method AttachLemmatizer

    method AttachLemmatizer

    */
    inline void AttachLemmatizer(LEMMATIZERLib::ILemmatizer* pVal);

    /*
    Method Clear

    method Clear

    */
    inline void Clear();

    /*
    Method CopyItems

    method CopyItems

    */
    inline void CopyItems(IUnknown* piPlmLinesFrom);

    /*
    Method Item

    property Item

    */
    inline QString Item(int pos);

    /*
    Method ProcessHyphenWords

    method ProcessHyphenWords

    */
    inline void ProcessHyphenWords(IUnknown* piGraphan);

    /*
    Method ProcessPlmLines

    method ProcessPlmLines

    */
    inline void ProcessPlmLines(IUnknown* piGraphmatFile);

    /*
    Method Remove

    method Remove

    */
    inline void Remove(int pos);

    /*
    Method SaveToFile

    method SaveToFile

    */
    inline void SaveToFile(const QString& filename);

    /*
    Method SetItem
    */
    inline void SetItem(int pos, const QString& rhs);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_LEMMATIZERLIB_NOINLINES
inline uint Paradigm::BaseLength() const
{
    QVariant qax_result = property("BaseLength");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline uint Paradigm::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline int Paradigm::Founded() const
{
    QVariant qax_result = property("Founded");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Paradigm::HomonymWeight() const
{
    QVariant qax_result = property("HomonymWeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Paradigm::LemmaPrefixLength() const
{
    QVariant qax_result = property("LemmaPrefixLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Paradigm::Norm() const
{
    QVariant qax_result = property("Norm");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline uint Paradigm::ParadigmID() const
{
    QVariant qax_result = property("ParadigmID");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline QString Paradigm::SrcAncode() const
{
    QVariant qax_result = property("SrcAncode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Paradigm::SrcNorm() const
{
    QVariant qax_result = property("SrcNorm");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Paradigm::TypeAncode() const
{
    QVariant qax_result = property("TypeAncode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Paradigm::WordWeight() const
{
    QVariant qax_result = property("WordWeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline uint Paradigm::Accent(uint pos)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QString Paradigm::Ancode(uint pos)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QString Paradigm::Form(uint pos)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int Paradigm::HomonymWeightWithForm(uint pos)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline uint IParadigm::BaseLength() const
{
    QVariant qax_result = property("BaseLength");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline uint IParadigm::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline int IParadigm::Founded() const
{
    QVariant qax_result = property("Founded");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IParadigm::HomonymWeight() const
{
    QVariant qax_result = property("HomonymWeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IParadigm::LemmaPrefixLength() const
{
    QVariant qax_result = property("LemmaPrefixLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IParadigm::Norm() const
{
    QVariant qax_result = property("Norm");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline uint IParadigm::ParadigmID() const
{
    QVariant qax_result = property("ParadigmID");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}

inline QString IParadigm::SrcAncode() const
{
    QVariant qax_result = property("SrcAncode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IParadigm::SrcNorm() const
{
    QVariant qax_result = property("SrcNorm");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IParadigm::TypeAncode() const
{
    QVariant qax_result = property("TypeAncode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IParadigm::WordWeight() const
{
    QVariant qax_result = property("WordWeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline uint IParadigm::Accent(uint pos)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline QString IParadigm::Ancode(uint pos)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QString IParadigm::Form(uint pos)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int IParadigm::HomonymWeightWithForm(uint pos)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline int ParadigmCollection::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LEMMATIZERLib::IParadigm* ParadigmCollection::Item(int pos)
{
    LEMMATIZERLib::IParadigm* qax_result = 0;
    qRegisterMetaType("IParadigm*", &qax_result);
    qRegisterMetaType("IParadigm", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}


inline int IParadigmCollection::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LEMMATIZERLib::IParadigm* IParadigmCollection::Item(int pos)
{
    LEMMATIZERLib::IParadigm* qax_result = 0;
    qRegisterMetaType("IParadigm*", &qax_result);
    qRegisterMetaType("IParadigm", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}


inline int LemmatizerRussian::MaximalPrediction() const
{
    QVariant qax_result = property("MaximalPrediction");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LemmatizerRussian::SetMaximalPrediction(int value){ setProperty("MaximalPrediction", QVariant(value)); }

inline int LemmatizerRussian::UseStatistic() const
{
    QVariant qax_result = property("UseStatistic");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LemmatizerRussian::SetUseStatistic(int value){ setProperty("UseStatistic", QVariant(value)); }

inline int LemmatizerRussian::CheckABC(const QString& Word)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Word};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigmCollection* LemmatizerRussian::CreateParadigmCollectionFromForm(const QString& Form, int capital, int UsePrediction)
{
    LEMMATIZERLib::IParadigmCollection* qax_result = 0;
    qRegisterMetaType("IParadigmCollection*", &qax_result);
    qRegisterMetaType("IParadigmCollection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Form, (void*)&capital, (void*)&UsePrediction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigmCollection* LemmatizerRussian::CreateParadigmCollectionFromNorm(const QString& Norm, int capital, int UsePrediction)
{
    LEMMATIZERLib::IParadigmCollection* qax_result = 0;
    qRegisterMetaType("IParadigmCollection*", &qax_result);
    qRegisterMetaType("IParadigmCollection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Norm, (void*)&capital, (void*)&UsePrediction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigm* LemmatizerRussian::CreateParadigmFromID(int id)
{
    LEMMATIZERLib::IParadigm* qax_result = 0;
    qRegisterMetaType("IParadigm*", &qax_result);
    qRegisterMetaType("IParadigm", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&id};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void LemmatizerRussian::LoadDictionariesRegistry()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void LemmatizerRussian::LoadStatisticRegistry(LEMMATIZERLib::__MIDL___MIDL_itf_Lemmatizer_0000_0000_0001 subj)
{
    void *_a[] = {0, (void*)&subj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline int ILemmatizer::MaximalPrediction() const
{
    QVariant qax_result = property("MaximalPrediction");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ILemmatizer::SetMaximalPrediction(int value){ setProperty("MaximalPrediction", QVariant(value)); }

inline int ILemmatizer::UseStatistic() const
{
    QVariant qax_result = property("UseStatistic");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ILemmatizer::SetUseStatistic(int value){ setProperty("UseStatistic", QVariant(value)); }

inline int ILemmatizer::CheckABC(const QString& Word)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Word};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigmCollection* ILemmatizer::CreateParadigmCollectionFromForm(const QString& Form, int capital, int UsePrediction)
{
    LEMMATIZERLib::IParadigmCollection* qax_result = 0;
    qRegisterMetaType("IParadigmCollection*", &qax_result);
    qRegisterMetaType("IParadigmCollection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Form, (void*)&capital, (void*)&UsePrediction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigmCollection* ILemmatizer::CreateParadigmCollectionFromNorm(const QString& Norm, int capital, int UsePrediction)
{
    LEMMATIZERLib::IParadigmCollection* qax_result = 0;
    qRegisterMetaType("IParadigmCollection*", &qax_result);
    qRegisterMetaType("IParadigmCollection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Norm, (void*)&capital, (void*)&UsePrediction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigm* ILemmatizer::CreateParadigmFromID(int id)
{
    LEMMATIZERLib::IParadigm* qax_result = 0;
    qRegisterMetaType("IParadigm*", &qax_result);
    qRegisterMetaType("IParadigm", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&id};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void ILemmatizer::LoadDictionariesRegistry()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ILemmatizer::LoadStatisticRegistry(LEMMATIZERLib::__MIDL___MIDL_itf_Lemmatizer_0000_0000_0001 subj)
{
    void *_a[] = {0, (void*)&subj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline int LemmatizerEnglish::MaximalPrediction() const
{
    QVariant qax_result = property("MaximalPrediction");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LemmatizerEnglish::SetMaximalPrediction(int value){ setProperty("MaximalPrediction", QVariant(value)); }

inline int LemmatizerEnglish::UseStatistic() const
{
    QVariant qax_result = property("UseStatistic");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LemmatizerEnglish::SetUseStatistic(int value){ setProperty("UseStatistic", QVariant(value)); }

inline int LemmatizerEnglish::CheckABC(const QString& Word)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Word};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigmCollection* LemmatizerEnglish::CreateParadigmCollectionFromForm(const QString& Form, int capital, int UsePrediction)
{
    LEMMATIZERLib::IParadigmCollection* qax_result = 0;
    qRegisterMetaType("IParadigmCollection*", &qax_result);
    qRegisterMetaType("IParadigmCollection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Form, (void*)&capital, (void*)&UsePrediction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigmCollection* LemmatizerEnglish::CreateParadigmCollectionFromNorm(const QString& Norm, int capital, int UsePrediction)
{
    LEMMATIZERLib::IParadigmCollection* qax_result = 0;
    qRegisterMetaType("IParadigmCollection*", &qax_result);
    qRegisterMetaType("IParadigmCollection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Norm, (void*)&capital, (void*)&UsePrediction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigm* LemmatizerEnglish::CreateParadigmFromID(int id)
{
    LEMMATIZERLib::IParadigm* qax_result = 0;
    qRegisterMetaType("IParadigm*", &qax_result);
    qRegisterMetaType("IParadigm", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&id};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void LemmatizerEnglish::LoadDictionariesRegistry()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void LemmatizerEnglish::LoadStatisticRegistry(LEMMATIZERLib::__MIDL___MIDL_itf_Lemmatizer_0000_0000_0001 subj)
{
    void *_a[] = {0, (void*)&subj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline int LemmatizerGerman::MaximalPrediction() const
{
    QVariant qax_result = property("MaximalPrediction");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LemmatizerGerman::SetMaximalPrediction(int value){ setProperty("MaximalPrediction", QVariant(value)); }

inline int LemmatizerGerman::UseStatistic() const
{
    QVariant qax_result = property("UseStatistic");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LemmatizerGerman::SetUseStatistic(int value){ setProperty("UseStatistic", QVariant(value)); }

inline int LemmatizerGerman::CheckABC(const QString& Word)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Word};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigmCollection* LemmatizerGerman::CreateParadigmCollectionFromForm(const QString& Form, int capital, int UsePrediction)
{
    LEMMATIZERLib::IParadigmCollection* qax_result = 0;
    qRegisterMetaType("IParadigmCollection*", &qax_result);
    qRegisterMetaType("IParadigmCollection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Form, (void*)&capital, (void*)&UsePrediction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigmCollection* LemmatizerGerman::CreateParadigmCollectionFromNorm(const QString& Norm, int capital, int UsePrediction)
{
    LEMMATIZERLib::IParadigmCollection* qax_result = 0;
    qRegisterMetaType("IParadigmCollection*", &qax_result);
    qRegisterMetaType("IParadigmCollection", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Norm, (void*)&capital, (void*)&UsePrediction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline LEMMATIZERLib::IParadigm* LemmatizerGerman::CreateParadigmFromID(int id)
{
    LEMMATIZERLib::IParadigm* qax_result = 0;
    qRegisterMetaType("IParadigm*", &qax_result);
    qRegisterMetaType("IParadigm", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&id};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void LemmatizerGerman::LoadDictionariesRegistry()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void LemmatizerGerman::LoadStatisticRegistry(LEMMATIZERLib::__MIDL___MIDL_itf_Lemmatizer_0000_0000_0001 subj)
{
    void *_a[] = {0, (void*)&subj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline int PLMLineCollection::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void PLMLineCollection::AttachLemmatizer(LEMMATIZERLib::ILemmatizer* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void PLMLineCollection::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void PLMLineCollection::CopyItems(IUnknown* piPlmLinesFrom)
{
    void *_a[] = {0, (void*)&piPlmLinesFrom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline QString PLMLineCollection::Item(int pos)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void PLMLineCollection::ProcessHyphenWords(IUnknown* piGraphan)
{
    void *_a[] = {0, (void*)&piGraphan};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void PLMLineCollection::ProcessPlmLines(IUnknown* piGraphmatFile)
{
    void *_a[] = {0, (void*)&piGraphmatFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void PLMLineCollection::Remove(int pos)
{
    void *_a[] = {0, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void PLMLineCollection::SaveToFile(const QString& filename)
{
    void *_a[] = {0, (void*)&filename};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void PLMLineCollection::SetItem(int pos, const QString& rhs)
{
    void *_a[] = {0, (void*)&pos, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline int IPLMLineCollection::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IPLMLineCollection::AttachLemmatizer(LEMMATIZERLib::ILemmatizer* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void IPLMLineCollection::Clear()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IPLMLineCollection::CopyItems(IUnknown* piPlmLinesFrom)
{
    void *_a[] = {0, (void*)&piPlmLinesFrom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline QString IPLMLineCollection::Item(int pos)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IPLMLineCollection::ProcessHyphenWords(IUnknown* piGraphan)
{
    void *_a[] = {0, (void*)&piGraphan};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IPLMLineCollection::ProcessPlmLines(IUnknown* piGraphmatFile)
{
    void *_a[] = {0, (void*)&piGraphmatFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IPLMLineCollection::Remove(int pos)
{
    void *_a[] = {0, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IPLMLineCollection::SaveToFile(const QString& filename)
{
    void *_a[] = {0, (void*)&filename};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IPLMLineCollection::SetItem(int pos, const QString& rhs)
{
    void *_a[] = {0, (void*)&pos, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}



#endif

}

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::Paradigm *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::Paradigm; }

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::IParadigm *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::IParadigm; }

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::ParadigmCollection *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::ParadigmCollection; }

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::IParadigmCollection *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::IParadigmCollection; }

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::LemmatizerRussian *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::LemmatizerRussian; }

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::ILemmatizer *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::ILemmatizer; }

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::LemmatizerEnglish *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::LemmatizerEnglish; }

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::LemmatizerGerman *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::LemmatizerGerman; }

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::PLMLineCollection *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::PLMLineCollection; }

template<>
inline void *qMetaTypeConstructHelper(const LEMMATIZERLib::IPLMLineCollection *t)
{ Q_ASSERT(!t); return new LEMMATIZERLib::IPLMLineCollection; }

#endif

